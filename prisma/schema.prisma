// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(uuid())
  username  String   @unique
  secret    String   @db.Text
  role      Role
  createdAt DateTime @default(now()) @map("created_at")
  isActive  Boolean  @map("is_active")
}

model Admin {
  id       String @id
  username String @unique
}

model Student {
  id         String   @id
  username   String   @unique
  firstName  String   @map("first_name")
  lastName   String?  @map("last_name")
  email      String?  @unique
  phone      String?  @unique
  address    String?  @db.Text
  img        String?
  bloodGroup String?  @map("blood_group")
  gender     Gender
  birthday   DateTime
  createdAt  DateTime @default(now()) @map("created_at")

  parentId    String       @map("parent_id")
  parent      Parent       @relation(fields: [parentId], references: [id])
  classId     Int          @map("class_id")
  class       Class        @relation(fields: [classId], references: [id])
  gradeId     Int          @map("grade_id")
  grade       Grade        @relation(fields: [gradeId], references: [id])
  attendances Attendance[]
  results     Result[]
}

model Parent {
  id        String   @id
  username  String   @unique
  firstName String   @map("first_name")
  lastName  String?  @map("last_name")
  email     String?  @unique
  phone     String   @unique
  address   String?
  img       String?
  createdAt DateTime @default(now()) @map("created_at")

  students Student[]
}

model Teacher {
  id         String   @id
  username   String   @unique
  firstName  String   @map("first_name")
  lastName   String?  @map("last_name")
  email      String?  @unique
  phone      String?  @unique
  address    String?
  img        String?
  bloodGroup String?  @map("blood_group")
  gender     Gender
  birthday   DateTime
  createdAt  DateTime @default(now()) @map("created_at")

  subjects Subject[]
  lessons  Lesson[]
  classes  Class[]
}

model Grade {
  id    Int @id @default(autoincrement())
  level Int @unique

  students Student[]
  classes  Class[]
}

model Class {
  id       Int    @id @default(autoincrement())
  name     String @unique
  capacity Int

  supervisorId  String?        @map("supervisor_id")
  supervisor    Teacher?       @relation(fields: [supervisorId], references: [id])
  gradeId       Int            @map("grade_id")
  grade         Grade          @relation(fields: [gradeId], references: [id])
  lessons       Lesson[]
  students      Student[]
  announcements Announcement[]
  events        Event[]
}

model Subject {
  id   Int    @id @default(autoincrement())
  name String @unique

  teachers Teacher[]
  lessons  Lesson[]
}

model Lesson {
  id        Int      @id @default(autoincrement())
  name      String
  day       Day
  startTime DateTime @map("start_time")
  endTime   DateTime @map("end_time")

  subjectId   Int          @map("subject_id")
  subject     Subject      @relation(fields: [subjectId], references: [id])
  classId     Int          @map("class_id")
  class       Class        @relation(fields: [classId], references: [id])
  teacherId   String       @map("teacher_id")
  teacher     Teacher      @relation(fields: [teacherId], references: [id])
  exams       Exam[]
  assignments Assignment[]
  attendances Attendance[]
}

model Exam {
  id        Int      @id @default(autoincrement())
  title     String
  startTime DateTime @map("start_time")
  endTime   DateTime @map("end_time")

  lessonId Int      @map("lesson_id")
  lesson   Lesson   @relation(fields: [lessonId], references: [id])
  results  Result[]
}

model Assignment {
  id        Int      @id @default(autoincrement())
  title     String
  startDate DateTime @map("start_date")
  endDate   DateTime @map("end_date")

  lessonId Int      @map("lesson_id")
  lesson   Lesson   @relation(fields: [lessonId], references: [id])
  results  Result[]
}

model Result {
  id    Int @id @default(autoincrement())
  score Int

  examId       Int?        @map("exam_id")
  exam         Exam?       @relation(fields: [examId], references: [id])
  assignmentId Int?        @map("assignment_id")
  assignment   Assignment? @relation(fields: [assignmentId], references: [id])
  studentId    String      @map("student_id")
  student      Student     @relation(fields: [studentId], references: [id])
}

model Attendance {
  id      Int      @id @default(autoincrement())
  date    DateTime
  present Boolean

  studentId String  @map("student_id")
  student   Student @relation(fields: [studentId], references: [id])
  lessonId  Int     @map("lesson_id")
  lesson    Lesson  @relation(fields: [lessonId], references: [id])
}

model Event {
  id          Int      @id @default(autoincrement())
  title       String
  description String?
  startDate   DateTime @map("start_date")
  endDate     DateTime @map("end_date")

  classId Int?   @map("class_id")
  class   Class? @relation(fields: [classId], references: [id])
}

model Announcement {
  id          Int      @id @default(autoincrement())
  title       String
  description String?
  date        DateTime

  classId Int?   @map("class_id")
  class   Class? @relation(fields: [classId], references: [id])
}

enum Role {
  ADMIN
  TEACHER
  STUDENT
  PARENT
}

enum Gender {
  MALE
  FEMALE
}

enum Day {
  MONDAY
  TUESDAY
  WEDNESDAY
  THURSDAY
  FRIDAY
  SATURDAY
}
